Scheme of Maneuver:
Task 1
> Linux Ops Station
→ INTERNET_HOST
-→ BLUE_Host-1
-→ BLUE_Host-3
-→ BLUE_INT_DMZ_HOST-1
Target Section:
Pivot
Hostname: INTERNET_HOST
IP: 10.10.0.40 (Use the provided floating IP only for login from outside of the network
Creds: PROVIDED CREDENTIALS
Action: Utilize to Pivot into Gorgan Cyberspace and test filters & Rules
T1
Hostname: BLUE_Host-1
IP: 172.16.82.106
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic
T2
Hostname: BLUE_Host-3
IP: 172.16.82.112
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic
T3
Hostname: BLUE_INT_DMZ_HOST-1 
IP: 172.16.40.10
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic
T4
Hostname: (Will be provided by Mission Command)
IP: 10.50.XXX.XXX (Will be Provided by Mission Command)
creds: studentX:passwordX (X = Student Number)
Known Ports: Unknown
Action: Interrogate Target and validate Signatures
T5
Hostname: BLUE_PRIV_HOST-1
IP: 192.168.1.10
creds: student : password
Action: Allow traffic through NAT Capabilities
T6
Hostname: BLUE_PRIV_HOST-3
IP: 192.168.3.30
creds: student : password
Action: Allow traffic through NAT Capabilities

IPTable Rule Definitions

From T1 (Blue Host 1)(172.16.82.106)
    • Allow New and Established traffic to/from via SSH, TELNET, and RDP

      	iptables -A INPUT -p tcp -m multiport --ports 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT
     	iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT


    • Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
	sudo iptables -P INPUT DROP
	sudo iptables -P OUTPUT DROP
	sudo iptables -P FORWARD DROP

    • Allow ping (ICMP) requests (and reply) to and from the Pivot(Internet-Host 10.10.0.40)
      
Specify inbound ICMP	
	sudo iptables -A INPUT -p icmp --icmp-type 8 -d 10.10.0.40 -j ACCEPT #( allow ping request from .40)#
	sudo iptables -A INPUT -p icmp --icmp-type 0 -s 10.10.0.40 -j ACCEPT #(allow ping reply from .40)#
Specify outboud ICMP	
	sudo iptables -A OUTPUT -p icmp --icmp-type 8 -d 10.10.0.40 -j ACCEPT #(allow ping request out to .40)#
        sudo iptables -A OUTPUT -p icmp --icmp-type 0 -s 10.10.0.40 -j ACCEPT #(allow ping reply out to .40)#

    • Allow ports 6579 and 4444 for both udp and tcp traffic

Specify TCP ports using multiport
	sudo iptables -A INPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
	sudo iptables -A OUTPUT -p tcp -m multiport --ports 6579,4444 -j ACCEPT
Specify UDP ports using multiport
	sudo iptables -A INPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT
	sudo iptables -A OUTPUT -p udp -m multiport --ports 6579,4444 -j ACCEPT

    • Allow New and Established traffic to/from via HTTP

Specify TCP states using multiport (both source and destination ports simultaneously (--ports))
	sudo iptables -A INPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT
	sudo iptables -A OUTPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT
			OR
  	Inbound
 		sudo iptables -A INPUT -p tcp --sport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
		sudo iptables -A INPUT -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
  	Outbound
		sudo iptables -A OUTPUT -p tcp --sport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
		sudo iptables -A OUTPUT -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
 

Once these steps have been completed and tested, go to Pivot and open up a netcat listener on port 9001 and wait up to 2 minutes for your flag. If you did not successfully accomplish the tasks above, then you will not receive the flag.
On Blue internet Host
	nc -lvp 9001 

IPTable Rule Definitions T3
T3
Hostname: BLUE_INT_DMZ_HOST-1 
IP: 172.16.40.10
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic
ssh student@172.16.40.10

    • Allow New and Established traffic to/from via SSH, TELNET, and RDP
      iptables -A INPUT -p tcp -m multiport --ports 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT
      iptables -A OUTPUT -p tcp -m multiport --ports 22,23,3389 -m state --state NEW,ESTABLISHED -j ACCEPT
      
    • Change the Default Policy in the Filter Table for the INPUT, OUTPUT, and FORWARD chains to DROP
      sudo iptables -P INPUT DROP
      sudo iptables -P OUTPUT DROP
      	sudo iptables -P FORWARD DROP
      
    • Allow New and Established traffic to/from via HTTP
      sudo iptables -A INPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT
      sudo iptables -A OUTPUT -p tcp -m multiport --ports 80 -m state --state NEW,ESTABLISHED -j ACCEPT

Once these steps have been completed and tested, go to Pivot and open up a netcat listener on port 9003 and wait up to 2 minutes for your flag. If you did not successfully accomplish the tasks above, then you will not receive the flag.
On Blue internet Host
	nc -lvp 9003

T2
Hostname: BLUE_Host-3
IP: 172.16.82.112
Creds: student : password
Action: Implement Host Filtering to Allow and Restrict Communications and Traffic

NFTable Rule Definitions

NFTable_Name: CCTC
Family_type: ip
nft add table [family] [table]
    [family] = ip(default), ip6, inet, arp, bridge and netdev.
    [table] = user provided name for the table.
1. Create the Table using the nft add table command.

		nft add table ip CCTC 
   
2. Create the Base Chain using the nft add chain command.
Create input and output base chains with:
    Hooks
    Priority of 0
    Policy as Accept

		nft add chain ip CCTC INPUT { type filter hook input priority 0 \; policy accept \;}
		nft add chain ip CCTC OUTPUT { type filter hook output priority 0 \; policy accept \;}
		
nft add chain [family] [table] [chain] { type [type] hook [hook] priority [priority] \; policy [policy] \;}   
    [chain] = User defined name for the chain.
    [type] =  can be filter, route or nat.
    [hook] = prerouting, ingress, input, forward, output or postrouting.
    [priority] = user provided integer. Lower number = higher priority. default = 0. Use "--" before negative numbers. (`-- -100`)
    [policy]  = set policy for the chain. Can be accept (default) or drop.
	Use "\" to escape the ";" in bash. The `;`(semi colon ) is used to separate commands on same line

3. Create a rule in the Chain using the nft add rule command.
nft add rule [family] [table] [chain] [matches (matches)] [statement]
    [matches] = typically protocol headers(i.e. ip, ip6, tcp, udp, icmp, ether, etc)
    (matches) = these are specific to the [matches] field.
    [statement] = action performed when packet is matched. Some examples are: log, accept, drop, reject, counter, nat (dnat, snat, masquerade)
[matches]
	ip saddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 }
	ip daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 }
	tcp flags { syn, ack, psh, rst, fin }
	tcp sport { port1 | port1-port2 | port1, port2, port3 }
	tcp dport { port1 | port1-port2 | port1, port2, port3 }
	udp sport { port1 | port1-port2 | port1, port2, port3 }
	udp dport { port1 | port1-port2 | port1, port2, port3 }
	icmp type type#
	icmp code code#
	ct state { new, established, related, invalid, untracked }
	iif [iface]
	oif [iface]
[statement] - can be accept, reject, or drop

Allow New and Established traffic to/from via SSH, TELNET, and RDP
		nft add rule ip CCTC INPUT tcp dport { 21-23, 80, 3389 } accept
		nft add rule ip CCTC OUTPUT tcp sport { 21-23, 80, 3389 } accept
		nft add rule ip CCTC OUTPUT tcp dport { 21-23, 80, 3389 } accept
		nft add rule ip CCTC INPUT tcp sport { 21-23, 80, 3389 } accept

Change your chains to now have a policy of Drop
		nft add chain [family] [table] [chain] { \; policy [policy] \;}
    
Allow ping (ICMP) requests (and reply) to and from the Pivot(10.10.0.40).
	Specify inbound ICMP
		nft add rule ip CCTC INPUT ip saddr 10.10.0.40 icmp type 8 accept
		nft add rule ip CCTC OUTPUT ip daddr 10.10.0.40 icmp type 0 accept
	Specify outboud ICMP
		nft add rule ip CCTC OUTPUT ip daddr 10.10.0.40 icmp type 8 accept
		nft add rule ip CCTC INPUT ip saddr 10.10.0.40 icmp type 0 accept

Allow ports 5050 and 5150 for both udp and tcp traffic to/from
	Specify a TCP ports as a server
		nft add rule ip CCTC INPUT tcp dport { 5050, 5150 } accept
		nft add rule ip CCTC OUTPUT tcp sport { 5050, 5150 } accept
	Specify a TCP ports as a client
		nft add rule ip CCTC OUTPUT tcp dport { 5050, 5150 } accept
		nft add rule ip CCTC INPUT tcp sport { 5050, 5150 } accept
	Specify a UDP ports as a server
		nft add rule ip CCTC INPUT udp dport { 5050, 5150 } accept
		nft add rule ip CCTC OUTPUT udp sport { 5050, 5150 } accept
	Specify a UDP ports as a client	
		nft add rule ip CCTC OUTPUT udp dport { 5050, 5150 } accept
		nft add rule ip CCTC INPUT udp sport { 5050, 5150 } accept
    
Allow New and Established traffic to/from via HTTP
	nft add rule ip CCTC INPUT tcp dport { 80 } ct state { new, established } accept
	nft add rule ip CCTC OUTPUT tcp sport { 80 } ct state { new, established }  accept

Once these steps have been completed and tested, go to Pivot and open up a netcat listener on port 9002 and wait up to 2 minutes for your flag. If you did not successfully accomplish the tasks above, then you will not receive the flag.
On Blue internet Host
	nc -lvp 9002
